<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hubert Lab</title>
  
  
  <link href="https://codeeggs.github.io/atom.xml" rel="self"/>
  
  <link href="https://codeeggs.github.io/"/>
  <updated>2021-04-26T06:50:28.569Z</updated>
  <id>https://codeeggs.github.io/</id>
  
  <author>
    <name>Hubert</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决Hexo插入图片失败问题</title>
    <link href="https://codeeggs.github.io/2021/05/27/%E8%A7%A3%E5%86%B3Hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://codeeggs.github.io/2021/05/27/%E8%A7%A3%E5%86%B3Hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</id>
    <published>2021-05-27T13:07:08.824Z</published>
    <updated>2021-04-26T06:50:28.569Z</updated>
    
    <content type="html"><![CDATA[<p>解决Hexo插入图片失败问题</p><span id="more"></span><h1 id="第一步：安装插件"><a href="#第一步：安装插件" class="headerlink" title="第一步：安装插件"></a>第一步：安装插件</h1><p>在<code>hexo</code>根目录下打开<code>cmd</code>或<code>Git Bash</code>，执行：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><h1 id="第二步：配置hexo"><a href="#第二步：配置hexo" class="headerlink" title="第二步：配置hexo"></a>第二步：配置hexo</h1><ol><li><p>打开hexo根目录下的配置文件_config.yml，找到post_asset_folder，将其值由false修改为true</p></li><li><p>打开<code>/node_modules/hexo-asset-image/index.js</code>，将其内容替换为以下内容：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="第三步：配置Typora"><a href="#第三步：配置Typora" class="headerlink" title="第三步：配置Typora"></a>第三步：配置Typora</h1><p><code>文件</code>-&gt;<code>偏好设置</code>-&gt;<code>图像</code>-&gt;<code>插入图片时</code>-&gt;<code>复制到指定路径</code>-&gt;<code>./$&#123;filename&#125;</code>。如下图：<img src="%E8%A7%A3%E5%86%B3Hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/image-20210425234748256.png" alt="image-20210425234748256"></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;解决Hexo插入图片失败问题&lt;/p&gt;</summary>
    
    
    
    <category term="Problem Record" scheme="https://codeeggs.github.io/categories/Problem-Record/"/>
    
    
    <category term="Hexo" scheme="https://codeeggs.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Codeggs的常用命令</title>
    <link href="https://codeeggs.github.io/2021/05/27/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://codeeggs.github.io/2021/05/27/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-05-27T13:07:08.822Z</published>
    <updated>2021-05-19T09:36:45.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol><li>将本地新建的项目提交到远程仓库<ol><li><code>git init</code>初始化本地仓库</li><li><code>git add .</code>将工作目录内容添加至暂存区</li><li><code>git commit -m &quot;first commit&quot;</code>将暂存区添加至本地仓库</li><li><code>git push -u https://github.com master</code>将本地仓库内容<code>push</code>到远程仓库</li></ol></li></ol><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><ol><li><code>hexo cl</code>清空缓存</li><li><code>hexo g</code>编译</li><li><code>hexo s</code>启动本地服务</li><li><code>hexo d</code>上传到远程仓库</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;将本地新建的项目提交到远程仓库&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;初始化本地仓库&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="ToolBox" scheme="https://codeeggs.github.io/categories/ToolBox/"/>
    
    
    <category term="Hexo" scheme="https://codeeggs.github.io/tags/Hexo/"/>
    
    <category term="Git" scheme="https://codeeggs.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://codeeggs.github.io/2021/05/27/hello-world/"/>
    <id>https://codeeggs.github.io/2021/05/27/hello-world/</id>
    <published>2021-05-27T13:07:08.820Z</published>
    <updated>2021-04-25T16:21:32.672Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>继承球体和圆柱体</title>
    <link href="https://codeeggs.github.io/2021/05/27/2021.05.15%E7%BB%A7%E6%89%BF%E7%90%83%E4%BD%93%E5%92%8C%E5%9C%86%E6%9F%B1%E4%BD%93/"/>
    <id>https://codeeggs.github.io/2021/05/27/2021.05.15%E7%BB%A7%E6%89%BF%E7%90%83%E4%BD%93%E5%92%8C%E5%9C%86%E6%9F%B1%E4%BD%93/</id>
    <published>2021-05-27T13:07:08.817Z</published>
    <updated>2021-05-18T03:32:04.410Z</updated>
    
    <content type="html"><![CDATA[<p>编写程序，定义抽象基类Container，由此派生出2个派生类球体类Sphere，圆柱体类Cylinder，分别用虚函数分别计算表面积和体积。（不要更改主程序）</p><span id="more"></span><p><strong>题目：</strong></p><p> 编写程序，定义抽象基类Container，由此派生出2个派生类球体类Sphere，圆柱体类Cylinder，分别用虚函数分别计算表面积和体积。（不要更改主程序）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Container *ptr;</span><br><span class="line"><span class="function">Sphere <span class="title">s</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">ptr=&amp;s;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;The area of sphere is &quot;</span>&lt;&lt;ptr-&gt;<span class="built_in">area</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;The colume of sphere is &quot;</span>&lt;&lt;ptr-&gt;<span class="built_in">volume</span>()&lt;&lt;endl;</span><br><span class="line"><span class="function">Cylinder <span class="title">c</span><span class="params">(<span class="number">3</span>,<span class="number">7</span>)</span></span>;</span><br><span class="line">ptr=&amp;c;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;The area of cylinder is &quot;</span>&lt;&lt;ptr-&gt;<span class="built_in">area</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;The colume of cylinder is &quot;</span>&lt;&lt;ptr-&gt;<span class="built_in">volume</span>()&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Container</span>(<span class="keyword">double</span> r = <span class="number">0</span>) :<span class="built_in">radius</span>(r) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sphere</span> :</span><span class="keyword">public</span> Container&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Sphere</span>(<span class="keyword">double</span> r) :<span class="built_in">Container</span>(r) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Sphere::area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span> * PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Sphere::volume</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span> * PI * radius * radius * radius / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cylinder</span> :</span><span class="keyword">public</span> Container&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> high;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Cylinder</span>(<span class="keyword">double</span> r, <span class="keyword">double</span> h) :<span class="built_in">Container</span>(r), <span class="built_in">high</span>(h) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cylinder::area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> PI * radius * radius * <span class="number">2</span> + <span class="number">2</span> * PI * radius * high;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cylinder::volume</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> PI * radius * radius * high;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">Container* ptr;</span><br><span class="line"><span class="function">Sphere <span class="title">s</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">ptr = &amp;s;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The area of sphere is &quot;</span> &lt;&lt; ptr-&gt;<span class="built_in">area</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The volume of sphere is &quot;</span> &lt;&lt; ptr-&gt;<span class="built_in">volume</span>() &lt;&lt; endl;</span><br><span class="line"><span class="function">Cylinder <span class="title">c</span><span class="params">(<span class="number">3</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line">ptr = &amp;c;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The area of cylinder is &quot;</span> &lt;&lt; ptr-&gt;<span class="built_in">area</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The volume of cylinder is &quot;</span> &lt;&lt; ptr-&gt;<span class="built_in">volume</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图片版：</strong></p><p><img src="2021.05.15%E7%BB%A7%E6%89%BF%E7%90%83%E4%BD%93%E5%92%8C%E5%9C%86%E6%9F%B1%E4%BD%93/code1.png" alt="code"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;编写程序，定义抽象基类Container，由此派生出2个派生类球体类Sphere，圆柱体类Cylinder，分别用虚函数分别计算表面积和体积。（不要更改主程序）&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计——TUT版专栏" scheme="https://codeeggs.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94TUT%E7%89%88%E4%B8%93%E6%A0%8F/"/>
    
    
    <category term="C++" scheme="https://codeeggs.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>时间类TIME</title>
    <link href="https://codeeggs.github.io/2021/05/27/2021.05.15%E6%97%B6%E9%97%B4%E7%B1%BBTIME/"/>
    <id>https://codeeggs.github.io/2021/05/27/2021.05.15%E6%97%B6%E9%97%B4%E7%B1%BBTIME/</id>
    <published>2021-05-27T13:07:08.815Z</published>
    <updated>2021-05-15T07:32:28.688Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p><blockquote><p>设计一个时钟类TIME，内含数据成员hour，minute，second表示时间，成员函数set( )设置时间数据，show( )显示时间数据。</p><p>重载运算符 ++和– (具有返回值)，每执行一次++，second自增1，执行一次–，second自减1。</p><p>second和minute的值在0 ~ 59区间循环(满59后再自增则归0，minute加1；second为0时再自减则为59，minute减1)。hour的值在0 ~ 23区间循环。</p></blockquote><p><strong>参考：</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TIME</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> hour;</span><br><span class="line"><span class="keyword">int</span> minute;</span><br><span class="line"><span class="keyword">int</span> second;</span><br><span class="line"><span class="function">TIME <span class="title">ruler</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//用于规范时间的格式，</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TIME</span>();</span><br><span class="line"><span class="built_in">TIME</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sethour</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setminute</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setsecond</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">TIME <span class="keyword">operator</span>++();</span><br><span class="line">TIME <span class="keyword">operator</span>++(<span class="keyword">int</span>);</span><br><span class="line">TIME <span class="keyword">operator</span>--();</span><br><span class="line">TIME <span class="keyword">operator</span>--(<span class="keyword">int</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">TIME::<span class="built_in">TIME</span>() :<span class="built_in">hour</span>(<span class="number">0</span>), <span class="built_in">minute</span>(<span class="number">0</span>), <span class="built_in">second</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">TIME::<span class="built_in">TIME</span>(<span class="keyword">int</span> h = <span class="number">0</span>, <span class="keyword">int</span> m = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>) : <span class="built_in">hour</span>(h), <span class="built_in">minute</span>(m), <span class="built_in">second</span>(s) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">ruler</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TIME <span class="title">TIME::ruler</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (second &gt; <span class="number">59</span>) &#123;</span><br><span class="line">second %= <span class="number">60</span>;</span><br><span class="line">minute++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minute &gt; <span class="number">59</span>) &#123;</span><br><span class="line">minute %= <span class="number">60</span>;</span><br><span class="line">hour++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hour &gt; <span class="number">23</span>) &#123;</span><br><span class="line">hour %= <span class="number">24</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (second &lt; <span class="number">0</span>) &#123;</span><br><span class="line">second = second % <span class="number">60</span> + <span class="number">60</span>;</span><br><span class="line">minute--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minute &lt; <span class="number">0</span>) &#123;</span><br><span class="line">minute = minute % <span class="number">60</span> + <span class="number">60</span>;</span><br><span class="line">hour--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hour &lt; <span class="number">0</span>) &#123;</span><br><span class="line">hour = hour % <span class="number">24</span> + <span class="number">24</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIME::sethour</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">hour = h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIME::setminute</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">minute = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIME::setsecond</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">second = s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIME::print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; hour &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; minute &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">TIME TIME::<span class="keyword">operator</span>++() &#123;</span><br><span class="line">++second;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">ruler</span>();</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">TIME TIME::<span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line"><span class="function">TIME <span class="title">p</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">second++;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">ruler</span>();</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">TIME TIME::<span class="keyword">operator</span>--() &#123;</span><br><span class="line">--second;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">ruler</span>();</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">TIME TIME::<span class="keyword">operator</span>--(<span class="keyword">int</span>) &#123;</span><br><span class="line"><span class="function">TIME <span class="title">p</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">second--;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">ruler</span>();</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">TIME <span class="title">t</span><span class="params">(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>)</span></span>;</span><br><span class="line">t.<span class="built_in">print</span>();</span><br><span class="line">++t;</span><br><span class="line">t.<span class="built_in">print</span>();</span><br><span class="line">--t;</span><br><span class="line">t.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">TIME p1 = t++;</span><br><span class="line">p1.<span class="built_in">print</span>();</span><br><span class="line">TIME p2 = t--;</span><br><span class="line">p2.<span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图片版：</strong></p><p><img src="2021.05.15%E6%97%B6%E9%97%B4%E7%B1%BBTIME/code.png" alt="code"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设计一个时钟类TIME，内含数据成员hour，minute，second表示时间，成员函数set( )设置时间数据，show( )显示时间数据。&lt;/p&gt;
&lt;p&gt;重载运算符 ++和– (具有返回</summary>
      
    
    
    
    <category term="程序设计——TUT版专栏" scheme="https://codeeggs.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94TUT%E7%89%88%E4%B8%93%E6%A0%8F/"/>
    
    
    <category term="C++" scheme="https://codeeggs.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>成员函数对Point类重载&quot;++&quot;运算符</title>
    <link href="https://codeeggs.github.io/2021/05/27/2021.05.13%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%AF%B9Point%E7%B1%BB%E9%87%8D%E8%BD%BD%E2%80%9C++%E2%80%9D%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://codeeggs.github.io/2021/05/27/2021.05.13%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%AF%B9Point%E7%B1%BB%E9%87%8D%E8%BD%BD%E2%80%9C++%E2%80%9D%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-05-27T13:07:08.813Z</published>
    <updated>2021-05-13T02:37:57.453Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p><blockquote><p>定义Point类，有坐标x,y两个成员变量，利用成员函数对Point类重载“++”运算符，实现对坐标值的改变。具体要求如下：</p><p>（1）   编写程序定义Point类，在类中定义整型的私有成员变量x,y；</p><p>（2）   定义成员函数Point&amp; operator++(); Point operator++(int);以实现对Point类重载“++”运算符，分别重载前置++和后置++；</p><p>（3）   编写主函数测试。</p></blockquote><p><strong>参考：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Point</span>(<span class="keyword">double</span> X = <span class="number">0</span>, <span class="keyword">double</span> Y = <span class="number">0</span>) :<span class="built_in">x</span>(X), <span class="built_in">y</span>(Y) &#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span>++();</span><br><span class="line">    Point <span class="keyword">operator</span>++(<span class="keyword">int</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;   </span><br><span class="line">&#125;;</span><br><span class="line">Point Point::<span class="keyword">operator</span>++() &#123;</span><br><span class="line">    ++x;</span><br><span class="line">    ++y;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Point Point::<span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">    Point P = *<span class="keyword">this</span>;</span><br><span class="line">    x++;</span><br><span class="line">    y++;</span><br><span class="line">    <span class="keyword">return</span> P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Point::print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">t1</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    t1.<span class="built_in">print</span>();</span><br><span class="line">    t1++;</span><br><span class="line">    t1.<span class="built_in">print</span>();</span><br><span class="line">    Point t2 = t1++;</span><br><span class="line">    t2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图片版：</strong></p><p><img src="2021.05.13%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%AF%B9Point%E7%B1%BB%E9%87%8D%E8%BD%BD%22++%22%E8%BF%90%E7%AE%97%E7%AC%A6/code.png" alt="code"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定义Point类，有坐标x,y两个成员变量，利用成员函数对Point类重载“++”运算符，实现对坐标值的改变。具体要求如下：&lt;/p&gt;
&lt;p&gt;（1）   编写程序定义Point类，在类中定义整型</summary>
      
    
    
    
    <category term="程序设计——TUT版专栏" scheme="https://codeeggs.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94TUT%E7%89%88%E4%B8%93%E6%A0%8F/"/>
    
    
    <category term="C++" scheme="https://codeeggs.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>利用友元函数对Point类重载“++”运算符</title>
    <link href="https://codeeggs.github.io/2021/05/27/2021.05.09%E5%88%A9%E7%94%A8%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E5%AF%B9Point%E7%B1%BB%E9%87%8D%E8%BD%BD%E2%80%9C++%E2%80%9D%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://codeeggs.github.io/2021/05/27/2021.05.09%E5%88%A9%E7%94%A8%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E5%AF%B9Point%E7%B1%BB%E9%87%8D%E8%BD%BD%E2%80%9C++%E2%80%9D%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-05-27T13:07:08.811Z</published>
    <updated>2021-05-09T13:40:49.867Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p><p>定义Point类，有坐标x,y两个成员变量，利用友元函数对Point类重载“++”运算符，实现对坐标值的改变。具体要求如下：</p><p>（1）   编写程序定义Point类，在类中定义整型的私有成员变量x,y；</p><p>（2）   在类中定义两个友元函数，分别重载前置++和后置++；</p><p>（3）   编写主函数测试。主函数如下，不能更改。</p><p>主函数如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;<span class="function">Point <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">a++;</span><br><span class="line"></span><br><span class="line">a.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">Point b;</span><br><span class="line"></span><br><span class="line">b=++a;</span><br><span class="line"></span><br><span class="line">b.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">a.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="2021.05.09%E5%88%A9%E7%94%A8%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E5%AF%B9Point%E7%B1%BB%E9%87%8D%E8%BD%BD%22++%22%E8%BF%90%E7%AE%97%E7%AC%A6/image-20210509213831431.png" alt="image-20210509213831431"></p><p><strong>参考</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Point</span>(<span class="keyword">int</span> X , <span class="keyword">int</span> Y );</span><br><span class="line"><span class="keyword">friend</span> Point <span class="keyword">operator</span>++(Point&amp; p);</span><br><span class="line"><span class="keyword">friend</span> Point <span class="keyword">operator</span>++(Point&amp; p, <span class="keyword">int</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Point::<span class="built_in">Point</span>(<span class="keyword">int</span> X=<span class="number">0</span>, <span class="keyword">int</span> Y=<span class="number">0</span>) :<span class="built_in">x</span>(X), <span class="built_in">y</span>(Y) &#123;&#125;</span><br><span class="line">Point <span class="keyword">operator</span>++(Point&amp; p) &#123;</span><br><span class="line">++p.x;</span><br><span class="line">++p.y;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">Point <span class="keyword">operator</span>++(Point&amp; p, <span class="keyword">int</span>) &#123;</span><br><span class="line"><span class="function">Point <span class="title">P</span><span class="params">(p)</span></span>;<span class="comment">//先将形参的值保存下</span></span><br><span class="line">p.x++;</span><br><span class="line">p.y++;</span><br><span class="line"><span class="keyword">return</span> P;<span class="comment">//返回被保存的形参的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Point::print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Point <span class="title">a</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">a++;</span><br><span class="line">a.<span class="built_in">print</span>();</span><br><span class="line">Point b;</span><br><span class="line">b = ++a;</span><br><span class="line">b.<span class="built_in">print</span>();</span><br><span class="line">a.<span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图片版：</strong></p><p><img src="2021.05.09%E5%88%A9%E7%94%A8%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E5%AF%B9Point%E7%B1%BB%E9%87%8D%E8%BD%BD%22++%22%E8%BF%90%E7%AE%97%E7%AC%A6/code.png" alt="code"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义Point类，有坐标x,y两个成员变量，利用友元函数对Point类重载“++”运算符，实现对坐标值的改变。具体要求如下：&lt;/p&gt;
&lt;p&gt;（1）   编写程序定义Point类，在类中定义整型的私有成员变量x,y；&lt;/</summary>
      
    
    
    
    <category term="程序设计——TUT版专栏" scheme="https://codeeggs.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94TUT%E7%89%88%E4%B8%93%E6%A0%8F/"/>
    
    
    <category term="C++" scheme="https://codeeggs.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>用函数模板求最大值</title>
    <link href="https://codeeggs.github.io/2021/05/27/2021.05.08%E7%94%A8%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E6%B1%82%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://codeeggs.github.io/2021/05/27/2021.05.08%E7%94%A8%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E6%B1%82%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2021-05-27T13:07:08.809Z</published>
    <updated>2021-05-10T02:24:02.915Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p><p>完善如下代码，实现complex类，在主程序中调用模板函数max比较两个复数大小（复数大小比较规则是复数实部和虚部的平方和，即real<em>real+imag</em>imag，平方和大的复数较大）。注意不要修改主程序.</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">Max</span><span class="params">(T x,T y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x&gt;y)?x:y; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> real,imag;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i1=<span class="number">2</span>,i2=<span class="number">3</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Max of i1 and i2 is &lt;&lt;Max(i1,i2)&lt;&lt;endl;</span></span><br><span class="line"><span class="string">complex a1(2,3),a2(1,2),a3;</span></span><br><span class="line"><span class="string">cout&lt;&lt;&quot;</span>a1=<span class="string">&quot;;</span></span><br><span class="line"><span class="string">a1.print();</span></span><br><span class="line"><span class="string">cout&lt;&lt;&quot;</span>a2=<span class="string">&quot;;</span></span><br><span class="line"><span class="string">a2.print();</span></span><br><span class="line"><span class="string">a3=Max(a1,a2);</span></span><br><span class="line"><span class="string">cout&lt;&lt;&quot;</span>Max of complex a1 <span class="keyword">and</span> a2 is <span class="string">&quot;;</span></span><br><span class="line"><span class="string">a3.print();</span></span><br><span class="line"><span class="string">return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="2021.05.08%E7%94%A8%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E6%B1%82%E6%9C%80%E5%A4%A7%E5%80%BC/image-20210508110054861.png" alt="image-20210508110054861"></p><p><strong>参考：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Max</span><span class="params">(T x, T y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x &gt; y ? x : y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> m_real, m_imag;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">complex</span>(<span class="keyword">double</span>);    <span class="comment">//构造函数，用于比较复数和实数 </span></span><br><span class="line"><span class="built_in">complex</span>(<span class="keyword">double</span>, <span class="keyword">double</span>);<span class="comment">//构造函数，用于构造一般的函数 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//打印输出 </span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> complex&amp; t);<span class="comment">//重载`&gt;`，用于比较复数大小 </span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">complex::<span class="built_in">complex</span>(<span class="keyword">double</span> real = <span class="number">0</span>) :<span class="built_in">m_real</span>(real), <span class="built_in">m_imag</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">complex::<span class="built_in">complex</span>(<span class="keyword">double</span> real, <span class="keyword">double</span> imag) : <span class="built_in">m_real</span>(real), <span class="built_in">m_imag</span>(imag) &#123;&#125;   </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">complex::print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m_real &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; m_imag &lt;&lt; <span class="string">&quot;i \n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> complex::<span class="keyword">operator</span>&gt;(<span class="keyword">const</span> complex&amp; t) &#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>-&gt;m_imag * <span class="keyword">this</span>-&gt;m_imag + <span class="keyword">this</span>-&gt;m_real * <span class="keyword">this</span>-&gt;m_real) &gt; (t.m_imag * t.m_imag + t.m_real * t.m_real))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">2</span>, i2 = <span class="number">3</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Max of i1 and i2 is&quot;</span> &lt;&lt; <span class="built_in">Max</span>(i1, i2) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">complex <span class="title">a1</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span>, <span class="title">a2</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span>, a3</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a1=&quot;</span>;</span><br><span class="line">a1.<span class="built_in">print</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a2=&quot;</span>;</span><br><span class="line">a2.<span class="built_in">print</span>();</span><br><span class="line">a3 = <span class="built_in">Max</span>(a1, a2);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Max of complex a1 and a2 is&quot;</span>;</span><br><span class="line">a3.<span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里还有图片版：</strong></p><p><img src="2021.05.08%E7%94%A8%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E6%B1%82%E6%9C%80%E5%A4%A7%E5%80%BC/code.png" alt="code"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;完善如下代码，实现complex类，在主程序中调用模板函数max比较两个复数大小（复数大小比较规则是复数实部和虚部的平方和，即real&lt;em&gt;real+imag&lt;/em&gt;imag，平方和大的复数较大）。注意不要修改主程</summary>
      
    
    
    
    <category term="程序设计——TUT版专栏" scheme="https://codeeggs.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94TUT%E7%89%88%E4%B8%93%E6%A0%8F/"/>
    
    
    <category term="C++" scheme="https://codeeggs.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>模板</title>
    <link href="https://codeeggs.github.io/2021/05/27/2021.04.26%E6%A8%A1%E6%9D%BF/"/>
    <id>https://codeeggs.github.io/2021/05/27/2021.04.26%E6%A8%A1%E6%9D%BF/</id>
    <published>2021-05-27T13:07:08.804Z</published>
    <updated>2021-05-27T11:43:42.002Z</updated>
    
    <content type="html"><![CDATA[<p>以后的题目和参考就写到这里啦！</p><span id="more"></span><blockquote><p>title: 模板<br>date: 2021年4月25日23:56:55<br>categories:</p><ol><li> 程序设计——TUT版专栏</li><li>Problem Record</li></ol><ul><li>tags:</li><li>模板</li><li>Hexo</li><li>author: 邱智录CodeEggs</li></ul></blockquote><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>title: 文章标题</p><p>date：</p><p>categories：</p><ol><li>程序设计——TUT版专栏</li><li>Problem Record</li><li>面试经历与复盘<ol><li>前端面经</li></ol></li><li>ToolBox</li></ol><p>tags: </p><ul><li>模板</li><li>Hexo</li><li>C++</li><li>Java</li><li>HTML</li><li>CSS</li><li>JavaScript</li><li>Linux</li><li>Git</li></ul><h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">hexo cl //清空缓存</span><br><span class="line">hexo g  //编译</span><br><span class="line">hexo s  //启动本地服务（可在localhost:4000浏览访问）</span><br><span class="line">hexo d  //上传到外部仓库</span><br><span class="line">hexo n  //在source/_posts中生成新文章</span><br></pre></td></tr></table></figure><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=972130662&bvid=BV1ep4y1h7wR&cid=310364905&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h2 id="Problem-Record-模板"><a href="#Problem-Record-模板" class="headerlink" title="Problem Record 模板"></a>Problem Record 模板</h2><ol><li>项目场景</li><li>问题描述</li><li>原因分析</li><li>解决方案</li></ol><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式:"></a>数学公式:</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;以后的题目和参考就写到这里啦！&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计——TUT版专栏" scheme="https://codeeggs.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94TUT%E7%89%88%E4%B8%93%E6%A0%8F/"/>
    
    
    <category term="模板" scheme="https://codeeggs.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
    <category term="Hexo" scheme="https://codeeggs.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>VS E0289 没有与参数列表匹配的参数“XX::XX”实例</title>
    <link href="https://codeeggs.github.io/2021/05/27/2021.04.26VS%20E0289%20%E6%B2%A1%E6%9C%89%E4%B8%8E%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E5%8C%B9%E9%85%8D%E7%9A%84%E5%8F%82%E6%95%B0%E2%80%9CXXXX%E2%80%9D%E5%AE%9E%E4%BE%8B/"/>
    <id>https://codeeggs.github.io/2021/05/27/2021.04.26VS%20E0289%20%E6%B2%A1%E6%9C%89%E4%B8%8E%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E5%8C%B9%E9%85%8D%E7%9A%84%E5%8F%82%E6%95%B0%E2%80%9CXXXX%E2%80%9D%E5%AE%9E%E4%BE%8B/</id>
    <published>2021-05-27T13:07:08.800Z</published>
    <updated>2021-04-26T06:50:05.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目场景"><a href="#项目场景" class="headerlink" title="项目场景"></a>项目场景</h2><p>创建学生类，在通过构造函数创建对象后，编译器（<code>vs2019</code>）报错</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_id;</span><br><span class="line"><span class="keyword">char</span>* m_name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">S</span>(<span class="keyword">int</span> id, <span class="keyword">char</span>* name);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">S::<span class="built_in">S</span>(<span class="keyword">int</span> id=<span class="number">1</span>, <span class="keyword">char</span>* name) &#123;</span><br><span class="line">m_id = id;</span><br><span class="line">m_name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">S::show</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">cout &lt;&lt; m_name &lt;&lt; m_id &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="function">S <span class="title">s</span><span class="params">(<span class="number">2</span>, <span class="string">&quot;abab&quot;</span>)</span></span>;</span><br><span class="line">s.<span class="built_in">show</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>这个错误会在<code>vs2019</code>中报错，但是在<code>Dev C++</code>中不会报错。<br>    <img src="https://img-blog.csdnimg.cn/20210421185645851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01haWxXaXRob3V0TmFtZQ==,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p><code>vs2019</code>对语法的要求更加严格了，在通过引用传递数组的时候必须添加<code>const</code>关键字。<br><code>const char*</code>类型不能赋值给<code>char*</code>类型</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>在<code>char *</code>添加<code>const</code></li><li>在使用<code>const char *</code>类型的变量前加<code>(char *)</code>，进行强制类型装换</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目场景&quot;&gt;&lt;a href=&quot;#项目场景&quot; class=&quot;headerlink&quot; title=&quot;项目场景&quot;&gt;&lt;/a&gt;项目场景&lt;/h2&gt;&lt;p&gt;创建学生类，在通过构造函数创建对象后，编译器（&lt;code&gt;vs2019&lt;/code&gt;）报错&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="Problem Record" scheme="https://codeeggs.github.io/categories/Problem-Record/"/>
    
    
    <category term="C++" scheme="https://codeeggs.github.io/tags/C/"/>
    
    <category term="VS" scheme="https://codeeggs.github.io/tags/VS/"/>
    
  </entry>
  
  <entry>
    <title>java 不兼容的类型 从int转换到short可能会有损失</title>
    <link href="https://codeeggs.github.io/2021/04/29/2021.04.30java%20%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%9A%84%E7%B1%BB%E5%9E%8B%20%E4%BB%8Eint%E8%BD%AC%E6%8D%A2%E5%88%B0short%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%9C%89%E6%8D%9F%E5%A4%B1/"/>
    <id>https://codeeggs.github.io/2021/04/29/2021.04.30java%20%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%9A%84%E7%B1%BB%E5%9E%8B%20%E4%BB%8Eint%E8%BD%AC%E6%8D%A2%E5%88%B0short%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%9C%89%E6%8D%9F%E5%A4%B1/</id>
    <published>2021-04-29T00:48:10.000Z</published>
    <updated>2021-04-30T01:08:02.550Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h2 id="项目场景"><a href="#项目场景" class="headerlink" title="项目场景"></a>项目场景</h2><ol><li>学习Java赋值运算符</li></ol></li><li><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ol><li>```java<br>public class HelloWorld {<pre><code>public static void main(String[] args) &#123;    short c1 = 1919;    c1 = c1 + 1;//此行报错    System.out.print(&quot;中共一大于&quot; + (c1 + 1) + &quot;年召开&quot;);&#125;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. ## 原因分析</span><br><span class="line"></span><br><span class="line">   1. 将大范围的数据赋值（如`int`）给小范围的数据（如`short`），可能会有精度损失，编译器不允许这样做。</span><br><span class="line"></span><br><span class="line">4. ## 解决方案</span><br><span class="line"></span><br><span class="line">   1. 将小范围数据类型提升（如将`short`提升为`int`）</span><br><span class="line"></span><br><span class="line">   2. 使用自增自减运算符，在自增自减运算中，隐含了强制类型转换</span><br><span class="line"></span><br><span class="line">   3. 直接强制类型抓换，将报错行代码修改为如下：</span><br><span class="line"></span><br><span class="line">   4. ```java</span><br><span class="line">      c1 = (short) (c1 + 1);</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;h2 id=&quot;项目场景&quot;&gt;&lt;a href=&quot;#项目场景&quot; class=&quot;headerlink&quot; title=&quot;项目场景&quot;&gt;&lt;/a&gt;项目场景&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;学习Java赋值运算符&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;问题描述&quot;&gt;</summary>
      
    
    
    
    <category term="Problem Record" scheme="https://codeeggs.github.io/categories/Problem-Record/"/>
    
    
    <category term="Java" scheme="https://codeeggs.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
